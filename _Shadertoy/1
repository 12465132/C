
#define pi 3.1415926535897932384626433832795
const int 
OBJTypeSize 		= 6,
SphereSize 			= 10,
PlaneSize  			= 1,
BoxSize 			= 1,
TorusSize 			= 1,
MBSize 				= 1,
RandomO		 		= 1;
const int //performace <-> precision
RenderDistance 		= 100,
stepcount 			= 70,
bouncecount 		= 4;
const float 
distOutFCCAM 		= 40.f,
GlowValue 			= 1000.,
Glowscale 			= 5.,
GlowValue2 			= 100.,
Glowscale2 			= 1.,
GlowMult2 			= .0,
reflection			= .7;
const bool
GlowSetting   		= false,
GlowSign	  		= true,
ColorSetting  		= true,
ShadowSetting 		= true,
reflectionsetting   = true,
SphereSetting 		= true,
PlaneSetting  		= true,
BoxSetting 	  		= true,
TorusSetting		= true,
MBSetting			= false;//TODO: broken

struct Camera{vec3 V,C;}C;
struct Light{vec3 C,S;}L;
struct Data{
float SDFDist;
int typeindex,index;
}D;
struct O{bvec3 Q; vec3 V,S;};//Q = (reflective,refractive,difusive) V is values respectivly
struct Plane{vec3 V;float H;O O;}P[PlaneSize];
struct Sphere{vec3 C;float R;O O;}S[SphereSize];
struct Box{vec3 C,LWH;float R; O O;}B[BoxSize];
struct Torus{vec3 V,C;float R1,R2;O O;}T[TorusSize];
struct  mandelbulb{vec3 V,C;float R;O O;}MB[MBSize];

float hash11(float p)
{
    p = fract(p * .1031);
    p *= p + 33.33;
    p *= p + p;
    return fract(p);
}
vec3 hash31(float p)
{
   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));
   p3 += dot(p3, p3.yzx+33.33);
   return fract((p3.xxy+p3.yzz)*p3.zyx); 
}
vec3 hash32(vec2 p)
{
	vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yxz+33.33);
    return fract((p3.xxy+p3.yzz)*p3.zyx);
}
float modf (float x,float y) 
{return(x - y * floor(x/y));}
//int test(int c){if(c>0){return test(c-1);}else{return 0;}}
float dots(vec3 l,vec3 l1)
{return (l1.x*l.x+l1.y*l.y+l1.z*l.z)/(abs(l1.x*l1.x+l1.y*l1.y+l1.z*l1.z));}
float angle(vec3 I,vec3 O)
{return atan(dots(I,O)/(length(I)*length(O)));}
float smin(float a, float b, float k) 
{float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);
return mix(a, b, h) - k*h*(1.0-h);}
float smoothclamp(float I,float min,float max,float err)
{return 1./(1.+pow(2.71828,((4.*I*err)-(2.*err*(min+max)))/(-1.*(max-min))));}
vec3 rotate( vec3 pos, float x, float y, float z ){
mat3 rotX = mat3( 1.0, 0.0, 0.0, 0.0, cos( x ), -sin( x ), 0.0, sin( x ), cos( x ) );
mat3 rotY = mat3( cos( y ), 0.0, sin( y ), 0.0, 1.0, 0.0, -sin(y), 0.0, cos(y) );
mat3 rotZ = mat3( cos( z ), -sin( z ), 0.0, sin( z ), cos( z ), 0.0, 0.0, 0.0, 1.0 );
return rotX * rotY * rotZ * pos;}
vec3 camoffset (vec3 v,vec2 o){return normalize(vec3(v.x,v.y,v.z))+normalize(vec3(-(v.y),(v.x),0.))*o.x+normalize(vec3(-v.z*v.x,-v.z*v.y,v.x*v.x+v.y*v.y))*o.y;}
Data init(){Data OD;OD.SDFDist = 10000000.,OD.typeindex=-1,OD.index=-1;return OD;}
float SDFPlane (vec3 p,float h,vec3 c)
 {return abs(dot(p,c)/length(p)+(h*h));}
float SDFSphere (vec3 S,float R, vec3 C) 
{return length(S+C)-R;}
float SDFBox(vec3 c,vec3 lwh,float r,vec3 C)
{vec3 q = abs(C+c) + r - lwh;
return length(max(q,0.0)) + 
min(max(q.x,max(q.y,q.z)),0.0)-r;}
float SDFTorus(vec3 c,vec3 v,float R1,float R2,vec3 p)
{return length(((p+c))-normalize((p+c) - normalize(v)*dot((p+c),normalize(v)))*R1)-R2;}
float SDFMB(vec3 C ,float R,vec3 r){
//r = rotate( r+C, sin(iTime), cos(iTime), 0.0 );
r = r+C;
vec3 zn = vec3( r.xyz );
float rad = 0.0;
float hit = 0.0;
float p = 15.*sin(iTime/10.);
float d = 1.;
for( int i = 0; i < 10; i++ ){	
rad = length( zn );
if( rad > 2. ){hit = 0.5 * log(rad) * rad / d;}
else{
float th = atan( length( zn.xy ), zn.z );
float phi = atan( zn.y, zn.x );		
float rado = pow(rad,7.0);
d = pow(rad, 7.) * 7. * d + 1.0;
float sint = sin( th * p );
zn.x = rado * sint * cos( phi * p );
zn.y = rado * sint * sin( phi * p );
zn.z = rado * cos( th * p ) ;
zn += r;}}
return hit*R;
}
Data SDFGlobal(vec3 CC,Plane P[PlaneSize],Sphere S[SphereSize],Box B[BoxSize],Torus T[TorusSize],mandelbulb MB[MBSize]){
float OBJDist[OBJTypeSize];
int OBJIndex[OBJTypeSize];
Data OUT,SOUT,S1OUT;
OUT.SDFDist = 10000.;
for(int i=1;i<OBJTypeSize;i++) OBJDist[i]=OUT.SDFDist,OBJIndex[i]=-1;
if(SphereSetting==true){
for(int i=0;i<SphereSize;i++){//itrates through spheres
if(OBJDist[1]>SDFSphere(S[i].C,S[i].R,CC)){
OBJDist[1]=SDFSphere(S[i].C,S[i].R,CC),OBJIndex[1]=i;
}}}
if(PlaneSetting==true){
for(int i=0;i<PlaneSize;i++){//itrates through planes
if(OBJDist[2]>SDFPlane(P[i].V,P[i].H,CC)){
OBJDist[2]=SDFPlane(P[i].V,P[i].H,CC),OBJIndex[2]=i;
}}}
if(BoxSetting==true){
for(int i=0;i<PlaneSize;i++){//itrates through Boxes
if(OBJDist[3]>SDFBox(B[i].C,B[i].LWH,B[i].R,CC)){
OBJDist[3]=SDFBox(B[i].C,B[i].LWH,B[i].R,CC),OBJIndex[3]=i;
}}}
if(TorusSetting==true){
for(int i=0;i<TorusSize;i++){//itrates through tori
if(OBJDist[4]>SDFTorus(T[i].C,T[i].V,T[i].R1,T[i].R2,CC)){
OBJDist[4]=SDFTorus(T[i].C,T[i].V,T[i].R1,T[i].R2,CC),OBJIndex[4]=i;
}}}
if(MBSetting==true){
for(int i=0;i<MBSize;i++){//brokn
if(OBJDist[5]>SDFMB(MB[i].C,MB[i].R,CC)){
OBJDist[5]=SDFMB(MB[i].C,MB[i].R,CC),OBJIndex[5]=i;
}}}
for(int i=1;i<OBJTypeSize;i++){
if(OUT.SDFDist>OBJDist[i]){
OUT.SDFDist=min(OBJDist[i],OUT.SDFDist);
OUT.typeindex=i;
OUT.index = OBJIndex[i];
}}
return OUT;}
O ColorPick(int index,int typeindex,bool ColorSetting,Plane NP[PlaneSize],Sphere NS[SphereSize],Box NB[BoxSize],Torus NT[TorusSize],mandelbulb NMB[MBSize]){
O STORE;
if(ColorSetting==true){
switch (typeindex) {
	  case 1:STORE = NS[index].O;
break;case 2:STORE = NP[index].O;
break;case 3:STORE = NB[index].O;
break;case 4:STORE = NT[index].O;
break;case 5:STORE = NMB[index].O;
break;default:STORE.S = vec3(0);STORE.Q = bvec3(false);STORE.V = vec3(0);
break;}}else{STORE.S = vec3(0);STORE.Q = bvec3(false);STORE.V = vec3(0);}
return STORE;}
vec3 genNormal(vec3 NCC,Plane NP[PlaneSize],Sphere NS[SphereSize],Box NB[BoxSize],Torus NT[TorusSize],mandelbulb NMB[MBSize]){
Data ND;vec2 e = vec2(.1, 0.0);vec3 N,S;
ND = SDFGlobal(NCC+e.xyy,NP,NS,NB,NT,NMB);
S.x = ND.SDFDist; 
ND = SDFGlobal(NCC+e.yxy,NP,NS,NB,NT,NMB);
S.y = ND.SDFDist; 
ND = SDFGlobal(NCC+e.yyx,NP,NS,NB,NT,NMB);
S.z = ND.SDFDist; 
ND = SDFGlobal(NCC		,NP,NS,NB,NT,NMB);// TODO:optmize
N = vec3(ND.SDFDist)-S;
return normalize(N);}
vec3 trace(
vec3 CC,
vec3 CV,
Plane NP[PlaneSize],
Sphere NS[SphereSize],
Box NB[BoxSize],
Torus NT[TorusSize],
mandelbulb NMB[MBSize]){
Data DS,DSS[bouncecount];
Camera C;
C.V = CV;
C.C = CC;
O fragColorStore[bouncecount];
vec3 
fragColorTotal = vec3(0),
CStore = vec3(0),
N;
float distOut   = 10000.,
StoreDist = distOut,
MinStoreDist = distOut,
OBJDist[OBJTypeSize],
GlowMultValue;
int 
OBJIndex[OBJTypeSize],
typeindex = -1,
index = -1,
Xindex = -1,
Bindex = -1;
for(int b=0;b<int(bouncecount);b++){
for(int i=1;i<OBJTypeSize;i++) OBJDist[i]=distOut,OBJIndex[i]=-1;
if(b!=0){
	if(fragColorStore[b-1].Q.x){
N = genNormal(C.C,P,S,B,T,MB);
C.V = C.V-2.*dot(C.V,N)*N;
//C.V = C.V+N;

CStore = C.C;
C.V = normalize(C.V); 
typeindex = -1;
index = -1;
distOut   = 10000.;
StoreDist = distOut;
D = init();
}
}
for(int x=0;x<int(stepcount);x++){//

D = SDFGlobal(C.C,P,S,B,T,MB);

distOut = D.SDFDist;
typeindex = D.typeindex;
index = D.index;
Xindex = x;
Bindex = b;

if (distOut<.1){
if(b==0){
	fragColorStore[b] = ColorPick(index,typeindex,ColorSetting,P,S,B,T,MB);
	x=int(stepcount);
}else if((DS.typeindex!=D.typeindex||DS.index!=D.index)){
	if(DS.typeindex==4&&x>10000){
	fragColorStore[b] = ColorPick(index,typeindex,ColorSetting,P,S,B,T,MB);
	x=int(stepcount);	
	}else{
	fragColorStore[b] = ColorPick(index,typeindex,ColorSetting,P,S,B,T,MB);
	x=int(stepcount);	
	}

}

}else if(length(C.C-CStore)>float(RenderDistance)){
//fragColorStore = vec3(GlowMultValue);
x=int(stepcount);
b=(bouncecount);		   			   }
C.C+=(C.V*distOut);
}
if(!reflectionsetting){b=(bouncecount);}
DSS[b]=D;
DS=D;
GlowMultValue = (float(Xindex)*distOut);
GlowMultValue *= smoothclamp(GlowMultValue,2.,GlowValue,Glowscale)-
	  GlowMult2*smoothclamp(GlowMultValue,2.,GlowValue2,Glowscale2);
GlowMultValue *= (float((2*int(GlowSign)-1))*float(GlowSetting));
fragColorStore[b].S += vec3(GlowMultValue);
if(ShadowSetting==true){}
//if(b!=0){
//if(fragColorStore[b].Q.x)
//{b=(bouncecount);}
//}
//if(fragColorStore[b].Q.y){b=(bouncecount);}
//if(fragColorStore[b].Q.z){b=(bouncecount);}}
}

//fragColorTotal = (fragColorStore[0]);
if(reflectionsetting!=true){
	fragColorTotal = fragColorStore[0].S;
}else{
for (int i = -1; i < Bindex; i++)
{
fragColorTotal =((1.-fragColorStore[i].V.x)*fragColorTotal+(fragColorStore[i].V.x*fragColorStore[i].S));
//fragColorTotal = ((fragColorStore[i].S));
}}

return fragColorTotal;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord ){
int rand = int(iTime);
vec3 ALavg = vec3(0);

	// Normalized pixel coordinates (from 0 to 1)
 L.C = 20.*vec3(cos(iTime),sin(iTime),.5);
 L.S = vec3(1,1,1);
 P[0].V = vec3(0,0,-7);
 P[0].O.S = vec3(
	 sin(71.*3.14*iTime*.001),
	 cos(73.*3.14*iTime*.001),
	 sin(79.*3.14*iTime*.001));
 P[0].H = 5.;
 P[0].O.Q = bvec3(true,false,false);
 P[0].O.V = vec3(10.,0,0);
 T[0].V = vec3(
	 cos(.05*iTime*05.),
	 sin(.05*iTime*23.),
	 cos(.05*iTime*13.));
 T[0].C = vec3(0,0,5);
 T[0].O.S = (vec3(.1,.1,.3));
 T[0].R1= 6.;
 T[0].R2= 2.;
 T[0].O.Q = bvec3(true,false,false);
 T[0].O.V = vec3(.7,0,0);
 B[0].C = vec3(15,0,(5.));
 B[0].LWH = (vec3(10));
 B[0].O.S = vec3(1);
 B[0].R = 7.5*(sin(iTime)+1.);
 B[0].O.Q = bvec3(true,false,false);
 B[0].O.V = vec3(.6,0,0);
MB[0].O.S = vec3(1,.5,1);
MB[0].C = vec3(5);
MB[0].R = 1.;
for(int x=0;x<SphereSize;x++){
S[x].C = 100.*vec3(
(hash11(float(x+1+RandomO+rand))-.5),
(hash11(float(x+2+RandomO+rand))-.5),
(hash11(float(x+3+RandomO+rand))-.5));
S[x].C += 4.*vec3( 0,0,(sin(S[x].C.x+iTime)+cos(S[x].C.y+iTime))/2.);
S[x].R =4.+2.*hash11(float(x-6))+2.*sin(iTime+sin(S[x].C.x)-cos(S[x].C.z));
S[x].O.S = vec3(
(hash11(float(x-1+RandomO+rand+int((iTime/10.))))),
(hash11(float(x-2+RandomO+rand+int((iTime/10.))))),
(hash11(float(x-3+RandomO+rand+int((iTime/10.))))));
S[x].O.Q = bvec3(float(x)>(float(SphereSize)*.5),false,false);
S[x].O.V = vec3(sin(iTime)*.5+.5,0,0);
}

float heightCAM =(iMouse.y-(iResolution.y))/200.;
float anglecamradian=-(iMouse.x-(iResolution.x))/40.;
C.C = distOutFCCAM*vec3(
sin(heightCAM)*cos(anglecamradian),
sin(heightCAM)*sin(-anglecamradian),
cos(heightCAM));

C.V = -C.C;
//CStore = C.C;
vec2 uv = fragCoord/iResolution.xy-.5;
uv.y *= float(iResolution.y/iResolution.x);
//C.V = normalize(camoffset(normalize(C.V),vec2(uv.x,-uv.y))); 



// ALavg=( //SLOW !!!
// trace(C.C,normalize(camoffset(normalize(C.V),vec2(uv.x,-uv.y-.00001))),P,S,B,T,MB)+
// trace(C.C,normalize(camoffset(normalize(C.V),vec2(uv.x,-uv.y+.00001))),P,S,B,T,MB)+
// trace(C.C,normalize(camoffset(normalize(C.V),vec2(uv.x-.00001,-uv.y))),P,S,B,T,MB)+
// trace(C.C,normalize(camoffset(normalize(C.V),vec2(uv.x+.00001,-uv.y))),P,S,B,T,MB)+
// trace(C.C,normalize(camoffset(normalize(C.V),vec2(uv.x,-uv.y))),P,S,B,T,MB)
// )/5.;
fragColor = vec4(trace(C.C,normalize(camoffset(normalize(C.V),vec2(uv.x,-uv.y))),P,S,B,T,MB),.5);
}
